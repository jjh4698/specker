require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var SPACE_KEY = 32;
var ENTER_KEY = 13;

function getTouchProps(touch) {
	if (!touch) return {};
	return {
		pageX: touch.pageX,
		pageY: touch.pageY,
		clientX: touch.clientX,
		clientY: touch.clientY
	};
}

var Mixin = {
	propTypes: {
		moveThreshold: React.PropTypes.number, // pixels to move before cancelling tap
		activeDelay: React.PropTypes.number, // ms to wait before adding the `-active` class
		pressDelay: React.PropTypes.number, // ms to wait before detecting a press
		pressMoveThreshold: React.PropTypes.number, // pixels to move before cancelling press
		preventDefault: React.PropTypes.bool, // whether to preventDefault on all events
		stopPropagation: React.PropTypes.bool, // whether to stopPropagation on all events

		onTap: React.PropTypes.func, // fires when a tap is detected
		onPress: React.PropTypes.func, // fires when a press is detected
		onTouchStart: React.PropTypes.func, // pass-through touch event
		onTouchMove: React.PropTypes.func, // pass-through touch event
		onTouchEnd: React.PropTypes.func, // pass-through touch event
		onMouseDown: React.PropTypes.func, // pass-through mouse event
		onMouseUp: React.PropTypes.func, // pass-through mouse event
		onMouseMove: React.PropTypes.func, // pass-through mouse event
		onMouseOut: React.PropTypes.func, // pass-through mouse event
		onKeyDown: React.PropTypes.func, // pass-through key event
		onKeyUp: React.PropTypes.func },

	// pass-through key event
	getDefaultProps: function getDefaultProps() {
		return {
			activeDelay: 0,
			moveThreshold: 100,
			pressDelay: 1000,
			pressMoveThreshold: 5
		};
	},

	getInitialState: function getInitialState() {
		return {
			isActive: false,
			touchActive: false,
			pinchActive: false
		};
	},

	componentWillUnmount: function componentWillUnmount() {
		this.cleanupScrollDetection();
		this.cancelPressDetection();
		this.clearActiveTimeout();
	},

	processEvent: function processEvent(event) {
		if (this.props.preventDefault) event.preventDefault();
		if (this.props.stopPropagation) event.stopPropagation();
	},

	onTouchStart: function onTouchStart(event) {
		if (this.props.onTouchStart && this.props.onTouchStart(event) === false) return;
		this.processEvent(event);
		window._blockMouseEvents = true;
		if (event.touches.length === 1) {
			this._initialTouch = this._lastTouch = getTouchProps(event.touches[0]);
			this.initScrollDetection();
			this.initPressDetection(event, this.endTouch);
			this.initTouchmoveDetection();
			this._activeTimeout = setTimeout(this.makeActive, this.props.activeDelay);
		} else if (this.onPinchStart && (this.props.onPinchStart || this.props.onPinchMove || this.props.onPinchEnd) && event.touches.length === 2) {
			this.onPinchStart(event);
		}
	},

	makeActive: function makeActive() {
		if (!this.isMounted()) return;
		this.clearActiveTimeout();
		this.setState({
			isActive: true
		});
	},

	clearActiveTimeout: function clearActiveTimeout() {
		clearTimeout(this._activeTimeout);
		this._activeTimeout = false;
	},

	initScrollDetection: function initScrollDetection() {
		this._scrollPos = { top: 0, left: 0 };
		this._scrollParents = [];
		this._scrollParentPos = [];
		var node = ReactDOM.findDOMNode(this);

		while (node) {
			if (node.scrollHeight > node.offsetHeight || node.scrollWidth > node.offsetWidth) {
				this._scrollParents.push(node);
				this._scrollParentPos.push(node.scrollTop + node.scrollLeft);
				this._scrollPos.top += node.scrollTop;
				this._scrollPos.left += node.scrollLeft;
			}

			node = node.parentNode;
		}
	},

	initTouchmoveDetection: function initTouchmoveDetection() {
		this._touchmoveTriggeredTimes = 0;
	},

	cancelTouchmoveDetection: function cancelTouchmoveDetection() {
		if (this._touchmoveDetectionTimeout) {
			clearTimeout(this._touchmoveDetectionTimeout);
			this._touchmoveDetectionTimeout = null;
			this._touchmoveTriggeredTimes = 0;
		}
	},

	calculateMovement: function calculateMovement(touch) {
		return {
			x: Math.abs(touch.clientX - this._initialTouch.clientX),
			y: Math.abs(touch.clientY - this._initialTouch.clientY)
		};
	},

	detectScroll: function detectScroll() {
		var currentScrollPos = { top: 0, left: 0 };
		for (var i = 0; i < this._scrollParents.length; i++) {
			currentScrollPos.top += this._scrollParents[i].scrollTop;
			currentScrollPos.left += this._scrollParents[i].scrollLeft;
		}
		return !(currentScrollPos.top === this._scrollPos.top && currentScrollPos.left === this._scrollPos.left);
	},

	cleanupScrollDetection: function cleanupScrollDetection() {
		this._scrollParents = undefined;
		this._scrollPos = undefined;
	},

	initPressDetection: function initPressDetection(event, callback) {
		if (!this.props.onPress) return;
		this._pressTimeout = setTimeout((function () {
			this.props.onPress(event);
			callback();
		}).bind(this), this.props.pressDelay);
	},

	cancelPressDetection: function cancelPressDetection() {
		clearTimeout(this._pressTimeout);
	},

	onTouchMove: function onTouchMove(event) {
		if (this._initialTouch) {
			this.processEvent(event);

			if (this.detectScroll()) {
				return this.endTouch(event);
			} else {
				if (this._touchmoveTriggeredTimes++ === 0) {
					this._touchmoveDetectionTimeout = setTimeout((function () {
						if (this._touchmoveTriggeredTimes === 1) {
							this.endTouch(event);
						}
					}).bind(this), 64);
				}
			}

			this.props.onTouchMove && this.props.onTouchMove(event);
			this._lastTouch = getTouchProps(event.touches[0]);
			var movement = this.calculateMovement(this._lastTouch);
			if (movement.x > this.props.pressMoveThreshold || movement.y > this.props.pressMoveThreshold) {
				this.cancelPressDetection();
			}
			if (movement.x > this.props.moveThreshold || movement.y > this.props.moveThreshold) {
				if (this.state.isActive) {
					this.setState({
						isActive: false
					});
				} else if (this._activeTimeout) {
					this.clearActiveTimeout();
				}
			} else {
				if (!this.state.isActive && !this._activeTimeout) {
					this.setState({
						isActive: true
					});
				}
			}
		} else if (this._initialPinch && event.touches.length === 2 && this.onPinchMove) {
			this.onPinchMove(event);
			event.preventDefault();
		}
	},

	onTouchEnd: function onTouchEnd(event) {
		var _this = this;

		if (this._initialTouch) {
			this.processEvent(event);
			var afterEndTouch;
			var movement = this.calculateMovement(this._lastTouch);
			if (movement.x <= this.props.moveThreshold && movement.y <= this.props.moveThreshold && this.props.onTap) {
				event.preventDefault();
				afterEndTouch = function () {
					var finalParentScrollPos = _this._scrollParents.map(function (node) {
						return node.scrollTop + node.scrollLeft;
					});
					var stoppedMomentumScroll = _this._scrollParentPos.some(function (end, i) {
						return end !== finalParentScrollPos[i];
					});
					if (!stoppedMomentumScroll) {
						_this.props.onTap(event);
					}
				};
			}
			this.endTouch(event, afterEndTouch);
		} else if (this.onPinchEnd && this._initialPinch && event.touches.length + event.changedTouches.length === 2) {
			this.onPinchEnd(event);
			event.preventDefault();
		}
	},

	endTouch: function endTouch(event, callback) {
		this.cancelTouchmoveDetection();
		this.cancelPressDetection();
		this.clearActiveTimeout();
		if (event && this.props.onTouchEnd) {
			this.props.onTouchEnd(event);
		}
		this._initialTouch = null;
		this._lastTouch = null;
		if (callback) {
			callback();
		}
		if (this.state.isActive) {
			this.setState({
				isActive: false
			});
		}
	},

	onMouseDown: function onMouseDown(event) {
		if (window._blockMouseEvents) {
			window._blockMouseEvents = false;
			return;
		}
		if (this.props.onMouseDown && this.props.onMouseDown(event) === false) return;
		this.processEvent(event);
		this.initPressDetection(event, this.endMouseEvent);
		this._mouseDown = true;
		this.setState({
			isActive: true
		});
	},

	onMouseMove: function onMouseMove(event) {
		if (window._blockMouseEvents || !this._mouseDown) return;
		this.processEvent(event);
		this.props.onMouseMove && this.props.onMouseMove(event);
	},

	onMouseUp: function onMouseUp(event) {
		if (window._blockMouseEvents || !this._mouseDown) return;
		this.processEvent(event);
		this.props.onMouseUp && this.props.onMouseUp(event);
		this.props.onTap && this.props.onTap(event);
		this.endMouseEvent();
	},

	onMouseOut: function onMouseOut(event) {
		if (window._blockMouseEvents || !this._mouseDown) return;
		this.processEvent(event);
		this.props.onMouseOut && this.props.onMouseOut(event);
		this.endMouseEvent();
	},

	endMouseEvent: function endMouseEvent() {
		this.cancelPressDetection();
		this._mouseDown = false;
		this.setState({
			isActive: false
		});
	},

	onKeyUp: function onKeyUp(event) {
		if (!this._keyDown) return;
		this.processEvent(event);
		this.props.onKeyUp && this.props.onKeyUp(event);
		this.props.onTap && this.props.onTap(event);
		this._keyDown = false;
		this.cancelPressDetection();
		this.setState({
			isActive: false
		});
	},

	onKeyDown: function onKeyDown(event) {
		if (this.props.onKeyDown && this.props.onKeyDown(event) === false) return;
		if (event.which !== SPACE_KEY && event.which !== ENTER_KEY) return;
		if (this._keyDown) return;
		this.initPressDetection(event, this.endKeyEvent);
		this.processEvent(event);
		this._keyDown = true;
		this.setState({
			isActive: true
		});
	},

	endKeyEvent: function endKeyEvent() {
		this.cancelPressDetection();
		this._keyDown = false;
		this.setState({
			isActive: false
		});
	},

	cancelTap: function cancelTap() {
		this.endTouch();
		this._mouseDown = false;
	},

	handlers: function handlers() {
		return {
			onTouchStart: this.onTouchStart,
			onTouchMove: this.onTouchMove,
			onTouchEnd: this.onTouchEnd,
			onMouseDown: this.onMouseDown,
			onMouseUp: this.onMouseUp,
			onMouseMove: this.onMouseMove,
			onMouseOut: this.onMouseOut,
			onKeyDown: this.onKeyDown,
			onKeyUp: this.onKeyUp
		};
	}
};

module.exports = Mixin;

},{"react":undefined,"react-dom":undefined}],2:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var touchStyles = require('./touchStyles');

/**
 * Tappable Component
 * ==================
 */
module.exports = function (mixins) {
	return React.createClass({
		displayName: 'Tappable',

		mixins: mixins,

		propTypes: {
			component: React.PropTypes.any, // component to create
			className: React.PropTypes.string, // optional className
			classBase: React.PropTypes.string, // base for generated classNames
			classes: React.PropTypes.object, // object containing the active and inactive class names
			style: React.PropTypes.object, // additional style properties for the component
			disabled: React.PropTypes.bool // only applies to buttons
		},

		getDefaultProps: function getDefaultProps() {
			return {
				component: 'span',
				classBase: 'Tappable'
			};
		},

		render: function render() {
			var props = this.props;
			var className = props.classBase + (this.state.isActive ? '-active' : '-inactive');

			if (props.className) {
				className += ' ' + props.className;
			}

			if (props.classes) {
				className += ' ' + (this.state.isActive ? props.classes.active : props.classes.inactive);
			}

			var style = {};
			_extends(style, touchStyles, props.style);

			var newComponentProps = _extends({}, props, {
				style: style,
				className: className,
				disabled: props.disabled,
				handlers: this.handlers
			}, this.handlers());

			delete newComponentProps.activeDelay;
			delete newComponentProps.classBase;
			delete newComponentProps.classes;
			delete newComponentProps.handlers;
			delete newComponentProps.onTap;
			delete newComponentProps.onPress;
			delete newComponentProps.onPinchStart;
			delete newComponentProps.onPinchMove;
			delete newComponentProps.onPinchEnd;
			delete newComponentProps.moveThreshold;
			delete newComponentProps.pressDelay;
			delete newComponentProps.pressMoveThreshold;
			delete newComponentProps.preventDefault;
			delete newComponentProps.stopPropagation;
			delete newComponentProps.component;

			return React.createElement(props.component, newComponentProps, props.children);
		}
	});
};

},{"./touchStyles":3,"react":undefined}],3:[function(require,module,exports){
'use strict';

var touchStyles = {
  WebkitTapHighlightColor: 'rgba(0,0,0,0)',
  WebkitTouchCallout: 'none',
  WebkitUserSelect: 'none',
  KhtmlUserSelect: 'none',
  MozUserSelect: 'none',
  msUserSelect: 'none',
  userSelect: 'none',
  cursor: 'pointer'
};

module.exports = touchStyles;

},{}],"react-tappable":[function(require,module,exports){
'use strict';

var TappableMixin = require('./TappableMixin');
var getComponent = require('./getComponent');
var touchStyles = require('./touchStyles');

var Component = getComponent([TappableMixin]);

module.exports = Component;
module.exports.touchStyles = touchStyles;
module.exports.Mixin = TappableMixin;

},{"./TappableMixin":1,"./getComponent":2,"./touchStyles":3}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvSmVkL0RldmVsb3BtZW50L3BhY2thZ2VzL3JlYWN0LXRhcHBhYmxlL3NyYy9UYXBwYWJsZU1peGluLmpzIiwiL1VzZXJzL0plZC9EZXZlbG9wbWVudC9wYWNrYWdlcy9yZWFjdC10YXBwYWJsZS9zcmMvZ2V0Q29tcG9uZW50LmpzIiwiL1VzZXJzL0plZC9EZXZlbG9wbWVudC9wYWNrYWdlcy9yZWFjdC10YXBwYWJsZS9zcmMvdG91Y2hTdHlsZXMuanMiLCIvVXNlcnMvSmVkL0RldmVsb3BtZW50L3BhY2thZ2VzL3JlYWN0LXRhcHBhYmxlL3NyYy9UYXBwYWJsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFcEMsSUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLElBQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQzs7QUFFckIsU0FBUyxhQUFhLENBQUUsS0FBSyxFQUFFO0FBQzlCLEtBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDdEIsUUFBTztBQUNOLE9BQUssRUFBRSxLQUFLLENBQUMsS0FBSztBQUNsQixPQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7QUFDbEIsU0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO0FBQ3RCLFNBQU8sRUFBRSxLQUFLLENBQUMsT0FBTztFQUN0QixDQUFDO0NBQ0Y7O0FBRUQsSUFBSSxLQUFLLEdBQUc7QUFDWCxVQUFTLEVBQUU7QUFDVixlQUFhLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNO0FBQ3JDLGFBQVcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDbkMsWUFBVSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFB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dCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG5jb25zdCBTUEFDRV9LRVkgPSAzMjtcbmNvbnN0IEVOVEVSX0tFWSA9IDEzO1xuXG5mdW5jdGlvbiBnZXRUb3VjaFByb3BzICh0b3VjaCkge1xuXHRpZiAoIXRvdWNoKSByZXR1cm4ge307XG5cdHJldHVybiB7XG5cdFx0cGFnZVg6IHRvdWNoLnBhZ2VYLFxuXHRcdHBhZ2VZOiB0b3VjaC5wYWdlWSxcblx0XHRjbGllbnRYOiB0b3VjaC5jbGllbnRYLFxuXHRcdGNsaWVudFk6IHRvdWNoLmNsaWVudFlcblx0fTtcbn1cblxudmFyIE1peGluID0ge1xuXHRwcm9wVHlwZXM6IHtcblx0XHRtb3ZlVGhyZXNob2xkOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLCAgICAgICAvLyBwaXhlbHMgdG8gbW92ZSBiZWZvcmUgY2FuY2VsbGluZyB0YXBcblx0XHRhY3RpdmVEZWxheTogUmVhY3QuUHJvcFR5cGVzLm51bWJlciwgICAgICAgICAvLyBtcyB0byB3YWl0IGJlZm9yZSBhZGRpbmcgdGhlIGAtYWN0aXZlYCBjbGFzc1xuXHRcdHByZXNzRGVsYXk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsICAgICAgICAgIC8vIG1zIHRvIHdhaXQgYmVmb3JlIGRldGVjdGluZyBhIHByZXNzXG5cdFx0cHJlc3NNb3ZlVGhyZXNob2xkOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLCAgLy8gcGl4ZWxzIHRvIG1vdmUgYmVmb3JlIGNhbmNlbGxpbmcgcHJlc3Ncblx0XHRwcmV2ZW50RGVmYXVsdDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsICAgICAgICAvLyB3aGV0aGVyIHRvIHByZXZlbnREZWZhdWx0IG9uIGFsbCBldmVudHNcblx0XHRzdG9wUHJvcGFnYXRpb246IFJlYWN0LlByb3BUeXBlcy5ib29sLCAgICAgICAvLyB3aGV0aGVyIHRvIHN0b3BQcm9wYWdhdGlvbiBvbiBhbGwgZXZlbnRzXG5cblx0XHRvblRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsICAgICAgICAgICAgICAgICAvLyBmaXJlcyB3aGVuIGEgdGFwIGlzIGRldGVjdGVkXG5cdFx0b25QcmVzczogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsICAgICAgICAgICAgICAgLy8gZmlyZXMgd2hlbiBhIHByZXNzIGlzIGRldGVjdGVkXG5cdFx0b25Ub3VjaFN0YXJ0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIHRvdWNoIGV2ZW50XG5cdFx0b25Ub3VjaE1vdmU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIHRvdWNoIGV2ZW50XG5cdFx0b25Ub3VjaEVuZDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsICAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIHRvdWNoIGV2ZW50XG5cdFx0b25Nb3VzZURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIG1vdXNlIGV2ZW50XG5cdFx0b25Nb3VzZVVwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgICAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIG1vdXNlIGV2ZW50XG5cdFx0b25Nb3VzZU1vdmU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIG1vdXNlIGV2ZW50XG5cdFx0b25Nb3VzZU91dDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsICAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIG1vdXNlIGV2ZW50XG5cdFx0b25LZXlEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgICAgICAgICAgICAgLy8gcGFzcy10aHJvdWdoIGtleSBldmVudFxuXHRcdG9uS2V5VXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAgICAgICAgICAgICAgIC8vIHBhc3MtdGhyb3VnaCBrZXkgZXZlbnRcblx0fSxcblxuXHRnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0YWN0aXZlRGVsYXk6IDAsXG5cdFx0XHRtb3ZlVGhyZXNob2xkOiAxMDAsXG5cdFx0XHRwcmVzc0RlbGF5OiAxMDAwLFxuXHRcdFx0cHJlc3NNb3ZlVGhyZXNob2xkOiA1XG5cdFx0fTtcblx0fSxcblxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aXNBY3RpdmU6IGZhbHNlLFxuXHRcdFx0dG91Y2hBY3RpdmU6IGZhbHNlLFxuXHRcdFx0cGluY2hBY3RpdmU6IGZhbHNlXG5cdFx0fTtcblx0fSxcblxuXHRjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuY2xlYW51cFNjcm9sbERldGVjdGlvbigpO1xuXHRcdHRoaXMuY2FuY2VsUHJlc3NEZXRlY3Rpb24oKTtcblx0XHR0aGlzLmNsZWFyQWN0aXZlVGltZW91dCgpO1xuXHR9LFxuXG5cdHByb2Nlc3NFdmVudDogZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucHJvcHMucHJldmVudERlZmF1bHQpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0aWYgKHRoaXMucHJvcHMuc3RvcFByb3BhZ2F0aW9uKSBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0fSxcblxuXHRvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmICh0aGlzLnByb3BzLm9uVG91Y2hTdGFydCAmJiB0aGlzLnByb3BzLm9uVG91Y2hTdGFydChldmVudCkgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0dGhpcy5wcm9jZXNzRXZlbnQoZXZlbnQpO1xuXHRcdHdpbmRvdy5fYmxvY2tNb3VzZUV2ZW50cyA9IHRydWU7XG5cdFx0aWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHR0aGlzLl9pbml0aWFsVG91Y2ggPSB0aGlzLl9sYXN0VG91Y2ggPSBnZXRUb3VjaFByb3BzKGV2ZW50LnRvdWNoZXNbMF0pO1xuXHRcdFx0dGhpcy5pbml0U2Nyb2xsRGV0ZWN0aW9uKCk7XG5cdFx0XHR0aGlzLmluaXRQcmVzc0RldGVjdGlvbihldmVudCwgdGhpcy5lbmRUb3VjaCk7XG5cdFx0XHR0aGlzLmluaXRUb3VjaG1vdmVEZXRlY3Rpb24oKTtcblx0XHRcdHRoaXMuX2FjdGl2ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMubWFrZUFjdGl2ZSwgdGhpcy5wcm9wcy5hY3RpdmVEZWxheSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLm9uUGluY2hTdGFydCAmJlxuXHRcdFx0XHQodGhpcy5wcm9wcy5vblBpbmNoU3RhcnQgfHwgdGhpcy5wcm9wcy5vblBpbmNoTW92ZSB8fCB0aGlzLnByb3BzLm9uUGluY2hFbmQpICYmXG5cdFx0XHRcdGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAyKSB7XG5cdFx0XHR0aGlzLm9uUGluY2hTdGFydChldmVudCk7XG5cdFx0fVxuXHR9LFxuXG5cdG1ha2VBY3RpdmU6IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcblx0XHR0aGlzLmNsZWFyQWN0aXZlVGltZW91dCgpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNBY3RpdmU6IHRydWVcblx0XHR9KTtcblx0fSxcblxuXHRjbGVhckFjdGl2ZVRpbWVvdXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5fYWN0aXZlVGltZW91dCk7XG5cdFx0dGhpcy5fYWN0aXZlVGltZW91dCA9IGZhbHNlO1xuXHR9LFxuXG5cdGluaXRTY3JvbGxEZXRlY3Rpb246IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9zY3JvbGxQb3MgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdHRoaXMuX3Njcm9sbFBhcmVudHMgPSBbXTtcblx0XHR0aGlzLl9zY3JvbGxQYXJlbnRQb3MgPSBbXTtcblx0XHR2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuXG5cdFx0d2hpbGUgKG5vZGUpIHtcblx0XHRcdGlmIChub2RlLnNjcm9sbEhlaWdodCA+IG5vZGUub2Zmc2V0SGVpZ2h0IHx8IG5vZGUuc2Nyb2xsV2lkdGggPiBub2RlLm9mZnNldFdpZHRoKSB7XG5cdFx0XHRcdHRoaXMuX3Njcm9sbFBhcmVudHMucHVzaChub2RlKTtcblx0XHRcdFx0dGhpcy5fc2Nyb2xsUGFyZW50UG9zLnB1c2gobm9kZS5zY3JvbGxUb3AgKyBub2RlLnNjcm9sbExlZnQpO1xuXHRcdFx0XHR0aGlzLl9zY3JvbGxQb3MudG9wICs9IG5vZGUuc2Nyb2xsVG9wO1xuXHRcdFx0XHR0aGlzLl9zY3JvbGxQb3MubGVmdCArPSBub2RlLnNjcm9sbExlZnQ7XG5cdFx0XHR9XG5cblx0XHRcdG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG5cdFx0fVxuXHR9LFxuXG5cdGluaXRUb3VjaG1vdmVEZXRlY3Rpb246IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl90b3VjaG1vdmVUcmlnZ2VyZWRUaW1lcyA9IDA7XG5cdH0sXG5cblx0Y2FuY2VsVG91Y2htb3ZlRGV0ZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX3RvdWNobW92ZURldGVjdGlvblRpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl90b3VjaG1vdmVEZXRlY3Rpb25UaW1lb3V0KTtcblx0XHRcdHRoaXMuX3RvdWNobW92ZURldGVjdGlvblRpbWVvdXQgPSBudWxsO1xuXHRcdFx0dGhpcy5fdG91Y2htb3ZlVHJpZ2dlcmVkVGltZXMgPSAwO1xuXHRcdH1cblx0fSxcblxuXHRjYWxjdWxhdGVNb3ZlbWVudDogZnVuY3Rpb24gKHRvdWNoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9pbml0aWFsVG91Y2guY2xpZW50WCksXG5cdFx0XHR5OiBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5faW5pdGlhbFRvdWNoLmNsaWVudFkpXG5cdFx0fTtcblx0fSxcblxuXHRkZXRlY3RTY3JvbGw6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgY3VycmVudFNjcm9sbFBvcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zY3JvbGxQYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjdXJyZW50U2Nyb2xsUG9zLnRvcCArPSB0aGlzLl9zY3JvbGxQYXJlbnRzW2ldLnNjcm9sbFRvcDtcblx0XHRcdGN1cnJlbnRTY3JvbGxQb3MubGVmdCArPSB0aGlzLl9zY3JvbGxQYXJlbnRzW2ldLnNjcm9sbExlZnQ7XG5cdFx0fVxuXHRcdHJldHVybiAhKGN1cnJlbnRTY3JvbGxQb3MudG9wID09PSB0aGlzLl9zY3JvbGxQb3MudG9wICYmIGN1cnJlbnRTY3JvbGxQb3MubGVmdCA9PT0gdGhpcy5fc2Nyb2xsUG9zLmxlZnQpO1xuXHR9LFxuXG5cdGNsZWFudXBTY3JvbGxEZXRlY3Rpb246IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9zY3JvbGxQYXJlbnRzID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuX3Njcm9sbFBvcyA9IHVuZGVmaW5lZDtcblx0fSxcblxuXHRpbml0UHJlc3NEZXRlY3Rpb246IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcblx0XHRpZiAoIXRoaXMucHJvcHMub25QcmVzcykgcmV0dXJuO1xuXHRcdHRoaXMuX3ByZXNzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5wcm9wcy5vblByZXNzKGV2ZW50KTtcblx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0fS5iaW5kKHRoaXMpLCB0aGlzLnByb3BzLnByZXNzRGVsYXkpO1xuXHR9LFxuXG5cdGNhbmNlbFByZXNzRGV0ZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX3ByZXNzVGltZW91dCk7XG5cdH0sXG5cblx0b25Ub3VjaE1vdmU6IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmICh0aGlzLl9pbml0aWFsVG91Y2gpIHtcblx0XHRcdHRoaXMucHJvY2Vzc0V2ZW50KGV2ZW50KTtcblxuXHRcdFx0aWYgKHRoaXMuZGV0ZWN0U2Nyb2xsKCkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZW5kVG91Y2goZXZlbnQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCh0aGlzLl90b3VjaG1vdmVUcmlnZ2VyZWRUaW1lcykrKyA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXMuX3RvdWNobW92ZURldGVjdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuX3RvdWNobW92ZVRyaWdnZXJlZFRpbWVzID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZW5kVG91Y2goZXZlbnQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0uYmluZCh0aGlzKSwgNjQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucHJvcHMub25Ub3VjaE1vdmUgJiYgdGhpcy5wcm9wcy5vblRvdWNoTW92ZShldmVudCk7XG5cdFx0XHR0aGlzLl9sYXN0VG91Y2ggPSBnZXRUb3VjaFByb3BzKGV2ZW50LnRvdWNoZXNbMF0pO1xuXHRcdFx0dmFyIG1vdmVtZW50ID0gdGhpcy5jYWxjdWxhdGVNb3ZlbWVudCh0aGlzLl9sYXN0VG91Y2gpO1xuXHRcdFx0aWYgKG1vdmVtZW50LnggPiB0aGlzLnByb3BzLnByZXNzTW92ZVRocmVzaG9sZCB8fCBtb3ZlbWVudC55ID4gdGhpcy5wcm9wcy5wcmVzc01vdmVUaHJlc2hvbGQpIHtcblx0XHRcdFx0dGhpcy5jYW5jZWxQcmVzc0RldGVjdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vdmVtZW50LnggPiB0aGlzLnByb3BzLm1vdmVUaHJlc2hvbGQgfHwgbW92ZW1lbnQueSA+IHRoaXMucHJvcHMubW92ZVRocmVzaG9sZCkge1xuXHRcdFx0XHRpZiAodGhpcy5zdGF0ZS5pc0FjdGl2ZSkge1xuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdFx0aXNBY3RpdmU6IGZhbHNlXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fYWN0aXZlVGltZW91dCkge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJBY3RpdmVUaW1lb3V0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghdGhpcy5zdGF0ZS5pc0FjdGl2ZSAmJiAhdGhpcy5fYWN0aXZlVGltZW91dCkge1xuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdFx0aXNBY3RpdmU6IHRydWVcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodGhpcy5faW5pdGlhbFBpbmNoICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAyICYmIHRoaXMub25QaW5jaE1vdmUpIHtcblx0XHRcdHRoaXMub25QaW5jaE1vdmUoZXZlbnQpO1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cblx0b25Ub3VjaEVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuX2luaXRpYWxUb3VjaCkge1xuXHRcdFx0dGhpcy5wcm9jZXNzRXZlbnQoZXZlbnQpO1xuXHRcdFx0dmFyIGFmdGVyRW5kVG91Y2g7XG5cdFx0XHR2YXIgbW92ZW1lbnQgPSB0aGlzLmNhbGN1bGF0ZU1vdmVtZW50KHRoaXMuX2xhc3RUb3VjaCk7XG5cdFx0XHRpZiAobW92ZW1lbnQueCA8PSB0aGlzLnByb3BzLm1vdmVUaHJlc2hvbGQgJiYgbW92ZW1lbnQueSA8PSB0aGlzLnByb3BzLm1vdmVUaHJlc2hvbGQgJiYgdGhpcy5wcm9wcy5vblRhcCkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRhZnRlckVuZFRvdWNoID0gKCkgPT4ge1xuXHRcdFx0XHRcdHZhciBmaW5hbFBhcmVudFNjcm9sbFBvcyA9IHRoaXMuX3Njcm9sbFBhcmVudHMubWFwKG5vZGUgPT4gbm9kZS5zY3JvbGxUb3AgKyBub2RlLnNjcm9sbExlZnQpO1xuXHRcdFx0XHRcdHZhciBzdG9wcGVkTW9tZW50dW1TY3JvbGwgPSB0aGlzLl9zY3JvbGxQYXJlbnRQb3Muc29tZSgoZW5kLCBpKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZW5kICE9PSBmaW5hbFBhcmVudFNjcm9sbFBvc1tpXTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZiAoIXN0b3BwZWRNb21lbnR1bVNjcm9sbCkge1xuXHRcdFx0XHRcdFx0dGhpcy5wcm9wcy5vblRhcChldmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5lbmRUb3VjaChldmVudCwgYWZ0ZXJFbmRUb3VjaCk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLm9uUGluY2hFbmQgJiYgdGhpcy5faW5pdGlhbFBpbmNoICYmIChldmVudC50b3VjaGVzLmxlbmd0aCArIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCkgPT09IDIpIHtcblx0XHRcdHRoaXMub25QaW5jaEVuZChldmVudCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblxuXHRlbmRUb3VjaDogZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuXHRcdHRoaXMuY2FuY2VsVG91Y2htb3ZlRGV0ZWN0aW9uKCk7XG5cdFx0dGhpcy5jYW5jZWxQcmVzc0RldGVjdGlvbigpO1xuXHRcdHRoaXMuY2xlYXJBY3RpdmVUaW1lb3V0KCk7XG5cdFx0aWYgKGV2ZW50ICYmIHRoaXMucHJvcHMub25Ub3VjaEVuZCkge1xuXHRcdFx0dGhpcy5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcblx0XHR9XG5cdFx0dGhpcy5faW5pdGlhbFRvdWNoID0gbnVsbDtcblx0XHR0aGlzLl9sYXN0VG91Y2ggPSBudWxsO1xuXHRcdGlmIChjYWxsYmFjaykge1xuXHRcdFx0Y2FsbGJhY2soKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNBY3RpdmUpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc0FjdGl2ZTogZmFsc2Vcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRvbk1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKHdpbmRvdy5fYmxvY2tNb3VzZUV2ZW50cykge1xuXHRcdFx0d2luZG93Ll9ibG9ja01vdXNlRXZlbnRzID0gZmFsc2U7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLnByb3BzLm9uTW91c2VEb3duICYmIHRoaXMucHJvcHMub25Nb3VzZURvd24oZXZlbnQpID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdHRoaXMucHJvY2Vzc0V2ZW50KGV2ZW50KTtcblx0XHR0aGlzLmluaXRQcmVzc0RldGVjdGlvbihldmVudCwgdGhpcy5lbmRNb3VzZUV2ZW50KTtcblx0XHR0aGlzLl9tb3VzZURvd24gPSB0cnVlO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNBY3RpdmU6IHRydWVcblx0XHR9KTtcblx0fSxcblxuXHRvbk1vdXNlTW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKHdpbmRvdy5fYmxvY2tNb3VzZUV2ZW50cyB8fCAhdGhpcy5fbW91c2VEb3duKSByZXR1cm47XG5cdFx0dGhpcy5wcm9jZXNzRXZlbnQoZXZlbnQpO1xuXHRcdHRoaXMucHJvcHMub25Nb3VzZU1vdmUgJiYgdGhpcy5wcm9wcy5vbk1vdXNlTW92ZShldmVudCk7XG5cdH0sXG5cblx0b25Nb3VzZVVwOiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRpZiAod2luZG93Ll9ibG9ja01vdXNlRXZlbnRzIHx8ICF0aGlzLl9tb3VzZURvd24pIHJldHVybjtcblx0XHR0aGlzLnByb2Nlc3NFdmVudChldmVudCk7XG5cdFx0dGhpcy5wcm9wcy5vbk1vdXNlVXAgJiYgdGhpcy5wcm9wcy5vbk1vdXNlVXAoZXZlbnQpO1xuXHRcdHRoaXMucHJvcHMub25UYXAgJiYgdGhpcy5wcm9wcy5vblRhcChldmVudCk7XG5cdFx0dGhpcy5lbmRNb3VzZUV2ZW50KCk7XG5cdH0sXG5cblx0b25Nb3VzZU91dDogZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKHdpbmRvdy5fYmxvY2tNb3VzZUV2ZW50cyB8fCAhdGhpcy5fbW91c2VEb3duKSByZXR1cm47XG5cdFx0dGhpcy5wcm9jZXNzRXZlbnQoZXZlbnQpO1xuXHRcdHRoaXMucHJvcHMub25Nb3VzZU91dCAmJiB0aGlzLnByb3BzLm9uTW91c2VPdXQoZXZlbnQpO1xuXHRcdHRoaXMuZW5kTW91c2VFdmVudCgpO1xuXHR9LFxuXG5cdGVuZE1vdXNlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmNhbmNlbFByZXNzRGV0ZWN0aW9uKCk7XG5cdFx0dGhpcy5fbW91c2VEb3duID0gZmFsc2U7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc0FjdGl2ZTogZmFsc2Vcblx0XHR9KTtcblx0fSxcblxuXHRvbktleVVwOiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMuX2tleURvd24pIHJldHVybjtcblx0XHR0aGlzLnByb2Nlc3NFdmVudChldmVudCk7XG5cdFx0dGhpcy5wcm9wcy5vbktleVVwICYmIHRoaXMucHJvcHMub25LZXlVcChldmVudCk7XG5cdFx0dGhpcy5wcm9wcy5vblRhcCAmJiB0aGlzLnByb3BzLm9uVGFwKGV2ZW50KTtcblx0XHR0aGlzLl9rZXlEb3duID0gZmFsc2U7XG5cdFx0dGhpcy5jYW5jZWxQcmVzc0RldGVjdGlvbigpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNBY3RpdmU6IGZhbHNlXG5cdFx0fSk7XG5cdH0sXG5cblx0b25LZXlEb3duOiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5vbktleURvd24gJiYgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdGlmIChldmVudC53aGljaCAhPT0gU1BBQ0VfS0VZICYmIGV2ZW50LndoaWNoICE9PSBFTlRFUl9LRVkpIHJldHVybjtcblx0XHRpZiAodGhpcy5fa2V5RG93bikgcmV0dXJuO1xuXHRcdHRoaXMuaW5pdFByZXNzRGV0ZWN0aW9uKGV2ZW50LCB0aGlzLmVuZEtleUV2ZW50KTtcblx0XHR0aGlzLnByb2Nlc3NFdmVudChldmVudCk7XG5cdFx0dGhpcy5fa2V5RG93biA9IHRydWU7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc0FjdGl2ZTogdHJ1ZVxuXHRcdH0pO1xuXHR9LFxuXG5cdGVuZEtleUV2ZW50OiBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5jYW5jZWxQcmVzc0RldGVjdGlvbigpO1xuXHRcdHRoaXMuX2tleURvd24gPSBmYWxzZTtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzQWN0aXZlOiBmYWxzZVxuXHRcdH0pO1xuXHR9LFxuXG5cdGNhbmNlbFRhcDogZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuZW5kVG91Y2goKTtcblx0XHR0aGlzLl9tb3VzZURvd24gPSBmYWxzZTtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMub25Ub3VjaFN0YXJ0LFxuXHRcdFx0b25Ub3VjaE1vdmU6IHRoaXMub25Ub3VjaE1vdmUsXG5cdFx0XHRvblRvdWNoRW5kOiB0aGlzLm9uVG91Y2hFbmQsXG5cdFx0XHRvbk1vdXNlRG93bjogdGhpcy5vbk1vdXNlRG93bixcblx0XHRcdG9uTW91c2VVcDogdGhpcy5vbk1vdXNlVXAsXG5cdFx0XHRvbk1vdXNlTW92ZTogdGhpcy5vbk1vdXNlTW92ZSxcblx0XHRcdG9uTW91c2VPdXQ6IHRoaXMub25Nb3VzZU91dCxcblx0XHRcdG9uS2V5RG93bjogdGhpcy5vbktleURvd24sXG5cdFx0XHRvbktleVVwOiB0aGlzLm9uS2V5VXAsXG5cdFx0fTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNaXhpbjtcbiIsInZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgdG91Y2hTdHlsZXMgPSByZXF1aXJlKCcuL3RvdWNoU3R5bGVzJyk7XG5cbi8qKlxuICogVGFwcGFibGUgQ29tcG9uZW50XG4gKiA9PT09PT09PT09PT09PT09PT1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWl4aW5zKSB7XG5cdHJldHVybiBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdFx0ZGlzcGxheU5hbWU6ICdUYXBwYWJsZScsXG5cblx0XHRtaXhpbnM6IG1peGlucyxcblxuXHRcdHByb3BUeXBlczoge1xuXHRcdFx0Y29tcG9uZW50OiBSZWFjdC5Qcm9wVHlwZXMuYW55LCAgICAgICAgICAgLy8gY29tcG9uZW50IHRvIGNyZWF0ZVxuXHRcdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAgICAgICAgLy8gb3B0aW9uYWwgY2xhc3NOYW1lXG5cdFx0XHRjbGFzc0Jhc2U6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsICAgICAgICAvLyBiYXNlIGZvciBnZW5lcmF0ZWQgY2xhc3NOYW1lc1xuXHRcdFx0Y2xhc3NlczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCwgICAgICAgICAgLy8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGFjdGl2ZSBhbmQgaW5hY3RpdmUgY2xhc3MgbmFtZXNcblx0XHRcdHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LCAgICAgICAgICAgIC8vIGFkZGl0aW9uYWwgc3R5bGUgcHJvcGVydGllcyBmb3IgdGhlIGNvbXBvbmVudFxuXHRcdFx0ZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sICAgICAgICAgICAgLy8gb25seSBhcHBsaWVzIHRvIGJ1dHRvbnNcblx0XHR9LFxuXG5cdFx0Z2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjb21wb25lbnQ6ICdzcGFuJyxcblx0XHRcdFx0Y2xhc3NCYXNlOiAnVGFwcGFibGUnXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRyZW5kZXI6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cdFx0XHR2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NCYXNlICsgKHRoaXMuc3RhdGUuaXNBY3RpdmUgPyAnLWFjdGl2ZScgOiAnLWluYWN0aXZlJyk7XG5cblx0XHRcdGlmIChwcm9wcy5jbGFzc05hbWUpIHtcblx0XHRcdFx0Y2xhc3NOYW1lICs9ICcgJyArIHByb3BzLmNsYXNzTmFtZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHByb3BzLmNsYXNzZXMpIHtcblx0XHRcdFx0Y2xhc3NOYW1lICs9ICcgJyArICh0aGlzLnN0YXRlLmlzQWN0aXZlID8gcHJvcHMuY2xhc3Nlcy5hY3RpdmUgOiBwcm9wcy5jbGFzc2VzLmluYWN0aXZlKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHN0eWxlID0ge307XG5cdFx0XHRPYmplY3QuYXNzaWduKHN0eWxlLCB0b3VjaFN0eWxlcywgcHJvcHMuc3R5bGUpO1xuXG5cdFx0XHR2YXIgbmV3Q29tcG9uZW50UHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuXHRcdFx0XHRzdHlsZTogc3R5bGUsXG5cdFx0XHRcdGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXHRcdFx0XHRkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG5cdFx0XHRcdGhhbmRsZXJzOiB0aGlzLmhhbmRsZXJzXG5cdFx0XHR9LCB0aGlzLmhhbmRsZXJzKCkpO1xuXG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMuYWN0aXZlRGVsYXk7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMuY2xhc3NCYXNlO1xuXHRcdFx0ZGVsZXRlIG5ld0NvbXBvbmVudFByb3BzLmNsYXNzZXM7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMuaGFuZGxlcnM7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMub25UYXA7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMub25QcmVzcztcblx0XHRcdGRlbGV0ZSBuZXdDb21wb25lbnRQcm9wcy5vblBpbmNoU3RhcnQ7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMub25QaW5jaE1vdmU7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMub25QaW5jaEVuZDtcblx0XHRcdGRlbGV0ZSBuZXdDb21wb25lbnRQcm9wcy5tb3ZlVGhyZXNob2xkO1xuXHRcdFx0ZGVsZXRlIG5ld0NvbXBvbmVudFByb3BzLnByZXNzRGVsYXk7XG5cdFx0XHRkZWxldGUgbmV3Q29tcG9uZW50UHJvcHMucHJlc3NNb3ZlVGhyZXNob2xkO1xuXHRcdFx0ZGVsZXRlIG5ld0NvbXBvbmVudFByb3BzLnByZXZlbnREZWZhdWx0O1xuXHRcdFx0ZGVsZXRlIG5ld0NvbXBvbmVudFByb3BzLnN0b3BQcm9wYWdhdGlvbjtcblx0XHRcdGRlbGV0ZSBuZXdDb21wb25lbnRQcm9wcy5jb21wb25lbnQ7XG5cblx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzLmNvbXBvbmVudCwgbmV3Q29tcG9uZW50UHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcblx0XHR9XG5cdH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvdWNoU3R5bGVzID0ge1xuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICBXZWJraXRUb3VjaENhbGxvdXQ6ICdub25lJyxcbiAgV2Via2l0VXNlclNlbGVjdDogJ25vbmUnLFxuICBLaHRtbFVzZXJTZWxlY3Q6ICdub25lJyxcbiAgTW96VXNlclNlbGVjdDogJ25vbmUnLFxuICBtc1VzZXJTZWxlY3Q6ICdub25lJyxcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0b3VjaFN0eWxlcztcbiIsInZhciBUYXBwYWJsZU1peGluID0gcmVxdWlyZSgnLi9UYXBwYWJsZU1peGluJyk7XG52YXIgZ2V0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9nZXRDb21wb25lbnQnKTtcbnZhciB0b3VjaFN0eWxlcyA9IHJlcXVpcmUoJy4vdG91Y2hTdHlsZXMnKTtcblxudmFyIENvbXBvbmVudCA9IGdldENvbXBvbmVudChbVGFwcGFibGVNaXhpbl0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudDtcbm1vZHVsZS5leHBvcnRzLnRvdWNoU3R5bGVzID0gdG91Y2hTdHlsZXM7XG5tb2R1bGUuZXhwb3J0cy5NaXhpbiA9IFRhcHBhYmxlTWl4aW47XG4iXX0=
